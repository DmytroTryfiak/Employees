{"version":3,"sources":["Components/employee-data.js","Components/employees.js","App.js","reportWebVitals.js","index.js"],"names":["alphabetReff","monthsReff","Employees","employeesGroupedByMonth","useState","employeesData","setEmployeesData","Set","employeesChecked","setEmployeesChecked","storageName","employeesGroupedByAlphabet","makeEmployeesGroupedByMonth","size","sort","a","b","dob","forEach","element","i","month","items","has","id","itemDob","Date","monthIndex","getMonth","item","lastName","firstName","getDate","getFullYear","push","handleCheck","delete","add","localStorage","setItem","JSON","stringify","useEffect","fetch","then","response","json","data","getItem","parse","getDataFromStorage","map","empty","length","charAt","fullName","checkedDob","firstLetter","makeEmployeesGroupedByLetter","className","EmployeeGroupByAlphabet","employeesGroup","EmployeeGroupByDob","EmployeeItem","employee","type","checked","onChange","bind","this","EmployeeItemForDob","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f2a02b4.chunk.js","sourcesContent":["\r\nexport const alphabetReff = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n\r\nexport const monthsReff = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];","import React, { useEffect, useState } from 'react';\r\nimport { alphabetReff, monthsReff } from './employee-data'\r\nimport './employees.css';\r\n\r\nexport function Employees() {\r\n    const [employeesData, setEmployeesData] = useState()\r\n    const [employeesChecked, setEmployeesChecked] = useState(new Set())\r\n    const storageName = 'checkedBod'\r\n    let employeesGroupedByAlphabet = []\r\n    let employeesGroupedByMonth\r\n    const fetchData = () => {\r\n        fetch('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setEmployeesData(data)\r\n            });\r\n    }\r\n    const makeEmployeesGroupedByLetter = () => {\r\n        if (!employeesData)\r\n            return\r\n        employeesData.sort((a, b) => {\r\n            if (a.lastName > b.lastName) {\r\n                return 1;\r\n            }\r\n            if (a.lastName < b.lastName) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        })\r\n        let i = 0\r\n        employeesGroupedByAlphabet = alphabetReff.map(element => {\r\n            let items = []\r\n            let empty = true\r\n            while (true) {\r\n                if (i < employeesData.length && employeesData[i].lastName.charAt(0) === element) {\r\n                    const item = {\r\n                        id: employeesData[i].id,\r\n                        fullName: `${employeesData[i].lastName} ${employeesData[i].firstName}`,\r\n                        checkedDob: employeesChecked.has(employeesData[i].id)\r\n                    }\r\n                    items.push(item)\r\n                    i++\r\n                    empty = false\r\n                }\r\n                else {\r\n                    if (empty)\r\n                        items.push(null)\r\n                    break\r\n                }\r\n            }\r\n            return {\r\n                firstLetter: element,\r\n                items: items,\r\n            }\r\n        })\r\n    }\r\n    const makeEmployeesGroupedByMonth = () => {\r\n        if (!employeesData || employeesChecked.size === 0)\r\n            return\r\n\r\n        employeesData.sort((a, b) => {\r\n            if (a.dob > b.dob) {\r\n                return 1;\r\n            }\r\n            if (a.dob < b.dob) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        })\r\n\r\n        employeesGroupedByMonth = []\r\n        monthsReff.forEach((element, i) => {\r\n            employeesGroupedByMonth[i] = {\r\n                month: element,\r\n                items: []\r\n            }\r\n        })\r\n\r\n        employeesData.forEach(element => {\r\n            if (!employeesChecked.has(element.id))\r\n                return\r\n            const itemDob = new Date(element.dob)\r\n            const monthIndex = itemDob.getMonth()\r\n            const item = {\r\n                id: element.id,\r\n                item: `${element.lastName} ${element.firstName} - ${itemDob.getDate()} ${monthsReff[itemDob.getMonth()]}, ${itemDob.getFullYear()} year`\r\n            }\r\n            employeesGroupedByMonth[monthIndex].items.push(item)\r\n        })\r\n    }\r\n    const getDataFromStorage = () => {\r\n        let data = localStorage.getItem(storageName)\r\n        if (!data)\r\n            return\r\n        setEmployeesChecked(new Set(JSON.parse(data)))\r\n    }\r\n    const handleCheck = (id) => {\r\n        employeesChecked.has(id) ? employeesChecked.delete(id) : employeesChecked.add(id)\r\n        localStorage.setItem(storageName, JSON.stringify([...employeesChecked]))\r\n        makeEmployeesGroupedByMonth()\r\n        setEmployeesChecked(new Set(employeesChecked));\r\n    }\r\n    useEffect(() => {\r\n        fetchData()\r\n        getDataFromStorage()\r\n    }, [])\r\n    makeEmployeesGroupedByLetter()\r\n    makeEmployeesGroupedByMonth()\r\n    return (\r\n        <div className='wrap' >\r\n            <div className=\"employeesByAlphabetWrap\">\r\n                <h1 className='employeesTitle'> Employees</h1>\r\n                <div className=\"employeesListByAlphabet\">\r\n                    {\r\n                        employeesGroupedByAlphabet.map(element => {\r\n                            return (\r\n                                <EmployeeGroupByAlphabet key={element.firstLetter} employeesGroup={element} handleCheck={handleCheck} />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"employeesByMonthWrap\">\r\n                <h1 className='employeesTitle'> Employees birthday</h1>\r\n                <div className=\"employeesListByMonth\">\r\n                    {\r\n                        employeesGroupedByMonth ? (\r\n                            employeesGroupedByMonth.map(element => {\r\n                                return (\r\n                                    element.items.length ?\r\n                                        <EmployeeGroupByDob key={element.month} employeesGroupedByMonth={element} />\r\n                                        :\r\n                                        null\r\n                                )\r\n                            })\r\n                        ) :\r\n                            (\r\n                                <p>No selected employees</p>\r\n                            )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function EmployeeGroupByAlphabet({ employeesGroup, handleCheck }) {\r\n    return (\r\n        <div className='employeesGroupByAlphabet'>\r\n            <h2 className='groupTitle'>{employeesGroup.firstLetter}</h2>\r\n            <ul className='itemList'>\r\n                {\r\n                    employeesGroup.items.map(element => {\r\n                        return element ?\r\n                            <EmployeeItem key={element.id} employee={element} handleCheck={handleCheck} />\r\n                            :\r\n                            <li key='0'>-----------------</li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function EmployeeItem({ employee, handleCheck }) {\r\n    return (\r\n        <li>\r\n            {employee.fullName}\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={employee.checkedDob}\r\n                onChange={handleCheck.bind(this, employee.id)}\r\n            />\r\n        </li>\r\n    );\r\n}\r\n\r\nexport function EmployeeGroupByDob({ employeesGroupedByMonth }) {\r\n    return (\r\n        <div className='employeesGroupByMonth'>\r\n            <h2 className='groupTitle'>{employeesGroupedByMonth.month}</h2>\r\n            <ul className='itemList'>\r\n                {\r\n                    employeesGroupedByMonth.items.map(element => <EmployeeItemForDob key={element.id} employee={element.item} />)\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function EmployeeItemForDob({ employee }) {\r\n    return (\r\n        <li>\r\n            {employee}\r\n        </li>\r\n    );\r\n}","import { Employees } from './Components/employees'\n\nfunction App() {\n    return (\n        <Employees />\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}